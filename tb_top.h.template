///////////////////////////////////////////////////////////
//Project: Carbon
//Description: SystemC 虚拟项目1
//Module: tb_top.h
//Description: 测试台 top 文件，实例化各测试模块
//Group: Nebula-Matrix 预研组
//Author: 张三
//Hierarchy：
//             tb_top __:test_ctrl
//                    |_:stim
//                    |_:stat
////////////////////////////////////////////////////////////

//1.防重定义
#ifndef __TB_TOP_H__
#define __TB_TOP_H__

//2.include工具库
#include "stdio.h"
#include <iostream>
#include <memory>
#include "systemc.h"   

//3.include子模块库
#include "stim.h"      //激励模块
#include "stat.h"      //统计模块
#include "test_ctrl.h" //测试控制模块
#include "comm_def.h"  //通用定义
#include "comm_func.h" //通用函数

using namespace std;   
class tb_top: public sc_module
{

//4.端口声明
  public: 
    sc_in_clk   全局时钟输入;
    sc_out<int> 全局时钟计数器输出1;
    sc_out< DUT配置模板> DUT配置输出口1; 
    vector<sc_out<数据类型> [参数] > 激励输出口1;  //参数化激励连接信号定义
    vector< sc_in<数据类型> [参数] > 产出输入口1;  //参数化输出连接信号定义

//4.信号声明
    sc_signal<TB配置模板> TB配置信号1;  //由 tb_top 配置 DUT 的信号

//5.模块声明
    tb_top(sc_module_name name); 
    SC_HAS_PROCESS(tb_top);

//6.子模块声明
    stim *stim1;
    stat *stat1;
    test_ctrl *test_ctrl;


//7.函数声明    

    test_ctrl = new test_ctrl("test_ctrl1")；
    stim1 = new stim("stim1");
    stat1 = new stat("stat1");
 
//8.信号连接 
    test_ctrl1->clk(全局时钟输入); 
    test_ctrl1->clk_cnt(全局时钟计数器输出1); //由test_ctrl模块直接输出给所有其他模块
    test_ctrl1->DUT配置输出口1(DUT配置输出口1);
    test_ctrl1->TB输出口1(TB配置输出口1);

    stim1->clkcnt(全局时钟计数器输出1);
    stim1->TB配置输入1(TB配置信号1);
    stim1->激励口1(激励信号1);

    stat1->clkcnt(全局时钟计数器输出1);
    stat1->TB配置输入1(TB配置信号1);
    stat1->接收口1(产出信号1);

};
 
#endif